@*  ManagerCalendar.cshtml
    Ez a cshtml a havi nézet megvalósítása.
    Vagyis nem kell azt vizsgálni, melyik nézetben vagyunk, ez a havinézet!
*@

@model Vrh.iScheduler.iSchedulerModel
@{
    // bootstrap toggle: http://www.bootstraptoggle.com/

    string titleOK = Model.Translation(typeof(WordCodes.iScheduler.Manager.Title));

    string areaName = (string)ViewContext.RouteData.DataTokens["area"];
    //string controllerName = (string)ViewContext.RouteData.DataTokens["controller"];
    string controllerName = HttpContext.Current.Request.RequestContext.RouteData.Values["controller"].ToString();

    ViewBag.Title = Html.Raw(titleOK);
}

@Styles.Render("~/Areas/iScheduler/Content/bootstrap-toggle.css")
@Styles.Render("~/Areas/iScheduler/Content/glyphicon.spin.css")
@Styles.Render("~/Areas/iScheduler/Scripts/FullCalendar/fullcalendar.min.css")
<link href="~/Areas/iScheduler/Scripts/FullCalendar/fullcalendar.print.min.css" rel="stylesheet" media="print" />
<link href="~/Areas/iScheduler/Content/ManagerCalendar.css" type="text/css" rel="stylesheet" />


@Scripts.Render("~/bundles/ischeduler/scripts")
@Scripts.Render("~/Areas/iScheduler/Scripts/FullCalendar/lib/moment.min.js")
@Scripts.Render("~/Areas/iScheduler/Scripts/FullCalendar/lib/jquery.min.js")
@Scripts.Render("~/Areas/iScheduler/Scripts/FullCalendar/lib/jquery-ui.min.js")
@Scripts.Render("~/Areas/iScheduler/Scripts/FullCalendar/fullcalendar.min.js")
@Scripts.Render("~/Areas/iScheduler/Scripts/FullCalendar/locale-all.js")

<div class="panel panel-primary">
    <div class="panel-heading">
        <table style="max-width:80%;background-color:inherit;">
            <tr>
                <td style="vertical-align:middle;" rowspan="2"><h2>@Html.Raw(titleOK)</h2></td>
                <td style="padding-left:10px;">@Html.Raw(Model.Translation(typeof(WordCodes.iScheduler.Manager.Label.ObjectTpye)) + ":")</td>
                <td style="padding-left:3px;font-weight:bold;">@Html.Raw(Model.Scheduler.ObjectType)</td>
            </tr>
            <tr>
                <td style="padding-left:10px;">@Html.Raw(Model.Translation(typeof(WordCodes.iScheduler.Manager.Label.ObjectGroupId)) + ":")</td>
                <td style="padding-left:3px;font-weight:bold;">@Html.Raw(Model.Scheduler.ObjectGroupId ?? "")</td>
            </tr>
        </table>
    </div>
    <div class="panel-body" id="ischedulerpanel">
        <table style="width:100%;">
            <tr>
                <td id="calendar"></td>
                <td style="padding-top:5px;vertical-align:top;">
                    @if (Model.Scheduler.Buttons.Count > 0)
                    {
                        for (int row = 1; row <= Model.Scheduler.ButtonRows; row++)
                        {   //ebben a nézetben jobb oldalt egymás alatt lesznek a gombok a megadott sorrendben
                            for (int col = 0; col <= Model.Scheduler.ButtonCols; col++)
                            {
                                iScheduler.OneButton btn = Model.Scheduler.Buttons.FirstOrDefault(x => x.Row == row && x.Col == col);
                                if (btn != null)
                                {   // ebben a nézetben nem engedélyezett a konzisztencia ellenőrzés
                                    // a havi nézetben a havi bézetre kapcsoló gombot kihagyjuk (letiltjuk)
                                    if (btn.Name != iScheduler.SysButtonNames.ConsistencyCheck && btn.Name != iScheduler.SysButtonNames.GoToMonthView)
                                    {
                                        string btnurl = Url.Content(btn.Url.GetUrl(true));
                                        btnurl = btnurl.Replace(Vrh.iScheduler.iScheduler.Variables.ObjectType, Model.ObjectType);
                                        btnurl = btnurl.Replace(Vrh.iScheduler.iScheduler.Variables.GroupId, Model.ObjectGroupId);

                                        <div style="padding-left:5px;padding-bottom:5px;">
                                            <button type="button"
                                                    id="@Html.Raw(btn.Name)"
                                                    name="@Html.Raw(btn.Name)"
                                                    class="btn allowhide"
                                                    style="@Html.Raw(btn.Style)"
                                                    onclick="javascript:buttonOnClick('@Html.Raw(btnurl)', @(btn.IsDialog?"true":"false"), '@(btn.DialogSize)');"
                                                    @(btn.Name == iScheduler.SysButtonNames.GoToMonthView ? "disabled" : "")>
                                                @(Html.Raw(btn.Display))
                                            </button>
                                        </div>
                                    }
                                }
                            }
                        }
                    }
                </td>
            </tr>
        </table>
    </div>
</div>

<script type="text/javascript">
    /*##### GLOBAL VARIABLES #####*/
    var jquery_3_2_1 = $.noConflict(true);
    var $calendar;
    var callingViewMode = '@(String.IsNullOrWhiteSpace(Model.CallingViewMode) ? "" : Model.CallingViewMode)';
    /*##### GLOBAL VARIABLES END #####*/

    /*##### FUNCTIONS #####*/
    function waitMessageDialog(message) {
        if (!message) message = '@Html.Raw(Model.Translation(typeof(WordCodes.iScheduler.Manager.WaitMessage)))';
        return bootbox.dialog({ message: '<div class="text-center"><i class="glyphicon glyphicon-cog spin-right"></i> ' + message + '</div>' });
    }

    var isAllowButtonClick = true;
    var timeoutButtonClick;
    function buttonOnClick(url, isDialog, widthDialog ) {
        console.log('iScheduler.Manager.ButtonOnClick url, isDialog, widthDialog', url, isDialog, widthDialog);
        if (isAllowButtonClick) {
            isAllowButtonClick = false;


            if (isDialog) {
                var prefix = (url.indexOf('?') != -1) ? '&' : '?';
                url = url + prefix + 'callingViewMode=' + callingViewMode;
                bootboxAction(url, false, null, null, widthDialog);
            } else {
                waitMessageDialog();
                window.location.assign(url);
            }
            timeoutButtonClick = setTimeout(function () {
                isAllowButtonClick = true;
            }, 1000);
        }
    }@*buttonOnClick function VÉGE*@

    /*##### FUNCTIONS END #####*/

    /*##### EVENTS #####*/
    (function ($) {
        $(document).ready(function () {
            console.log('iScheduler.ManagerMonth.cshtml: document.ready event: PING');

            $calendar = $('#calendar');

            $calendar.fullCalendar({
                height: 700,
                locale: '@(VRH.Log4Pro.MultiLanguageManager.MultiLanguageManager.RelevantLanguageCode.Substring(0,2))',
                defaultDate: '@DateTime.Now.ToString("yyyy-MM-dd")',

                header: {
                    left: 'title',
                    center: 'month,agendaWeek,agendaDay',
                    right: 'prev,next today'
                },

                //buttonIcons: true, // show the prev/next text
                buttonText: {
                    prev: '<',
                    next: '>'
                },

                businessHours: true, // display business hours

                weekNumbers: true,
                weekNumbersWithinDays: true,
                weekNumberCalculation: 'ISO',

                navLinks: true, // can click day/week names to navigate views
                editable: true,
                eventLimit: true, // allow "more" link when too many events

                events: function (start, end, timezone, callback) {
                    var url = '@Html.Raw(Url.Action("GetCalendarEvents", controllerName
                                                    , new { area = areaName
                                                          , objectType = Model.Scheduler.ObjectType
                                                          , groupId = Model.Scheduler.ObjectGroupId
                                                          , connectionString = Model.ConnectionString
                                                    }))';
                    $.ajax({
                        url: url,
                        type: 'POST',
                        contenttype: 'application/json',
                        datatype: 'json',
                        data: ({ start: start.unix(), end: end.unix() }),
                        success: function (response) {
                            if (response.ErrorMessage == "") {
                                callback(response.Events)
                            } else {
                                bootbox.alert(response.ErrorMessage);
                            }
                        },
                        error: function (jqXHR, exception) {
                            console.log('iScheduler.ManagerMonth.cshtml: deleteSchedule: Ajax hívás sikertelen! ', jqXHR.responseText);
                        }
                    });
                },
                eventClick: function (event) {
                    if (event.url) {
                        var url = event.url + '&xmlfile=@(Model.Scheduler.XMLFileName.Replace(@"\",@"\\"))';
                        bootboxAction(url);
                        return false;
                    }
                },
            });

        });@*$(document).ready() event VÉGE*@
    })(jquery_3_2_1);
    /*##### EVENTS END #####*/
</script>
